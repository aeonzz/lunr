/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AiImport } from './routes/ai'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as IndexImport } from './routes/index'
import { Route as AppIssuesImport } from './routes/app/issues'
import { Route as AppInboxImport } from './routes/app/inbox'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AiRoute = AiImport.update({
  id: '/ai',
  path: '/ai',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppIssuesRoute = AppIssuesImport.update({
  id: '/issues',
  path: '/issues',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppInboxRoute = AppInboxImport.update({
  id: '/inbox',
  path: '/inbox',
  getParentRoute: () => AppRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/ai': {
      id: '/ai'
      path: '/ai'
      fullPath: '/ai'
      preLoaderRoute: typeof AiImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/app/inbox': {
      id: '/app/inbox'
      path: '/inbox'
      fullPath: '/app/inbox'
      preLoaderRoute: typeof AppInboxImport
      parentRoute: typeof AppRouteImport
    }
    '/app/issues': {
      id: '/app/issues'
      path: '/issues'
      fullPath: '/app/issues'
      preLoaderRoute: typeof AppIssuesImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppInboxRoute: typeof AppInboxRoute
  AppIssuesRoute: typeof AppIssuesRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppInboxRoute: AppInboxRoute,
  AppIssuesRoute: AppIssuesRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/ai': typeof AiRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/app/inbox': typeof AppInboxRoute
  '/app/issues': typeof AppIssuesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/ai': typeof AiRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/app/inbox': typeof AppInboxRoute
  '/app/issues': typeof AppIssuesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/ai': typeof AiRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/app/inbox': typeof AppInboxRoute
  '/app/issues': typeof AppIssuesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/ai'
    | '/dashboard'
    | '/login'
    | '/app/inbox'
    | '/app/issues'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/ai'
    | '/dashboard'
    | '/login'
    | '/app/inbox'
    | '/app/issues'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/ai'
    | '/dashboard'
    | '/login'
    | '/app/inbox'
    | '/app/issues'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AiRoute: typeof AiRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AiRoute: AiRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/ai",
        "/dashboard",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/inbox",
        "/app/issues"
      ]
    },
    "/ai": {
      "filePath": "ai.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/app/inbox": {
      "filePath": "app/inbox.tsx",
      "parent": "/app"
    },
    "/app/issues": {
      "filePath": "app/issues.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
