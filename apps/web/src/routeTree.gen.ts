/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AiImport } from './routes/ai'
import { Route as AppRouteImport } from './routes/_app/route'
import { Route as AppIndexImport } from './routes/_app/index'
import { Route as AppUserNameIssuesImport } from './routes/_app/$userName/issues'
import { Route as AppUserNameInboxImport } from './routes/_app/$userName/inbox'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AiRoute = AiImport.update({
  id: '/ai',
  path: '/ai',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppUserNameIssuesRoute = AppUserNameIssuesImport.update({
  id: '/$userName/issues',
  path: '/$userName/issues',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppUserNameInboxRoute = AppUserNameInboxImport.update({
  id: '/$userName/inbox',
  path: '/$userName/inbox',
  getParentRoute: () => AppRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/ai': {
      id: '/ai'
      path: '/ai'
      fullPath: '/ai'
      preLoaderRoute: typeof AiImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/$userName/inbox': {
      id: '/_app/$userName/inbox'
      path: '/$userName/inbox'
      fullPath: '/$userName/inbox'
      preLoaderRoute: typeof AppUserNameInboxImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/$userName/issues': {
      id: '/_app/$userName/issues'
      path: '/$userName/issues'
      fullPath: '/$userName/issues'
      preLoaderRoute: typeof AppUserNameIssuesImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppUserNameInboxRoute: typeof AppUserNameInboxRoute
  AppUserNameIssuesRoute: typeof AppUserNameIssuesRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppUserNameInboxRoute: AppUserNameInboxRoute,
  AppUserNameIssuesRoute: AppUserNameIssuesRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AppRouteRouteWithChildren
  '/ai': typeof AiRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/': typeof AppIndexRoute
  '/$userName/inbox': typeof AppUserNameInboxRoute
  '/$userName/issues': typeof AppUserNameIssuesRoute
}

export interface FileRoutesByTo {
  '/ai': typeof AiRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/': typeof AppIndexRoute
  '/$userName/inbox': typeof AppUserNameInboxRoute
  '/$userName/issues': typeof AppUserNameIssuesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/ai': typeof AiRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/_app/': typeof AppIndexRoute
  '/_app/$userName/inbox': typeof AppUserNameInboxRoute
  '/_app/$userName/issues': typeof AppUserNameIssuesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/ai'
    | '/dashboard'
    | '/login'
    | '/'
    | '/$userName/inbox'
    | '/$userName/issues'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/ai'
    | '/dashboard'
    | '/login'
    | '/'
    | '/$userName/inbox'
    | '/$userName/issues'
  id:
    | '__root__'
    | '/_app'
    | '/ai'
    | '/dashboard'
    | '/login'
    | '/_app/'
    | '/_app/$userName/inbox'
    | '/_app/$userName/issues'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AiRoute: typeof AiRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  AiRoute: AiRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/ai",
        "/dashboard",
        "/login"
      ]
    },
    "/_app": {
      "filePath": "_app/route.tsx",
      "children": [
        "/_app/",
        "/_app/$userName/inbox",
        "/_app/$userName/issues"
      ]
    },
    "/ai": {
      "filePath": "ai.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_app/": {
      "filePath": "_app/index.tsx",
      "parent": "/_app"
    },
    "/_app/$userName/inbox": {
      "filePath": "_app/$userName/inbox.tsx",
      "parent": "/_app"
    },
    "/_app/$userName/issues": {
      "filePath": "_app/$userName/issues.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
